% This file was created with JabRef 2.10b2.
% Encoding: UTF-8


@Article{appel2007very,
  Title                    = {A Very Modal Model of a Modern, Major, General Type System},
  Author                   = {Appel, Andrew W and Mellies, Paul-Andr{\'e} and Richards, Christopher D and Vouillon, J{\'e}r{\^o}me},
  Journal                  = {ACM SIGPLAN Notices},
  Year                     = {2007},
  Number                   = {1},
  Pages                    = {109--122},
  Volume                   = {42},

  Owner                    = {jgross},
  Publisher                = {ACM},
  Timestamp                = {2016.03.09},
  Url                      = {https://www.cs.princeton.edu/~appel/papers/modalmodel.pdf}
}

@Article{BaraszChristianoFallensteinEtAl2014,
  Title                    = {Robust Cooperation in the Prisoner's Dilemma: Program Equilibrium via Provability Logic},
  Author                   = {Mihaly Barasz and Paul Christiano and Benja Fallenstein and Marcello Herreshoff and Patrick LaVictoire and Eliezer Yudkowsky},
  Journal                  = {ArXiv e-prints},
  Year                     = {2014},

  Month                    = {Jan},

  __markedentry            = {[Jason:6]},
  Abstract                 = {We consider the one-shot Prisoner's Dilemma between algorithms with read-access to one anothers' source codes, and we use the modal logic of provability to build agents that can achieve mutual cooperation in a manner that is robust, in that cooperation does not require exact equality of the agents' source code, and unexploitable, meaning that such an agent never cooperates when its opponent defects. We construct a general framework for such "modal agents", and study their properties.},
  Comments                 = {18 pages},
  Eprint                   = {1401.5577},
  Oai2identifier           = {1401.5577},
  Url                      = {http://arxiv.org/pdf/1401.5577v1.pdf}
}

@InProceedings{brown2016breaking,
  Title                    = {Breaking Through the Normalization Barrier: A Self-Interpreter for F-omega},
  Author                   = {Brown, Matt and Palsberg, Jens},
  Booktitle                = {Proceedings of the 43rd Annual {ACM} {SIGPLAN}-{SIGACT} Symposium on Principles of Programming Languages},
  Year                     = {2016},
  Organization             = {ACM},
  Pages                    = {5--17},

  Doi                      = {10.1145/2837614.2837623},
  Owner                    = {jgross},
  Timestamp                = {2016.02.26},
  Url                      = {http://compilers.cs.ucla.edu/popl16/popl16-full.pdf}
}

@Article{Chapman200921,
  Title                    = {Type Theory Should Eat Itself},
  Author                   = {James Chapman},
  Journal                  = {Electronic Notes in Theoretical Computer Science},
  Year                     = {2009},
  Note                     = {Proceedings of the International Workshop on Logical Frameworks and Metalanguages: Theory and Practice (LFMTP 2008)},
  Pages                    = {21--36},
  Volume                   = {228},

  Abstract                 = {In this paper I present a partial formalisation of a normaliser for type theory in Agda [Ulf Norell. Agda 2, 2007. http://www.cs.chalmers.se/~ulfn/]; extending previous work on big-step normalisation [Thorsten Altenkirch and James Chapman. Big-Step Normalisation. Journal of Functional Programming, 2008. Special Issue on Mathematically Structured Functional Programming. To appear, Thorsten Altenkirch and James Chapman. Tait in one big step. In Workshop on Mathematically Structured Functional Programming, \{MSFP\} 2006, Kuressaare, Estonia, July 2, 2006, electronic Workshop in Computing (eWiC), Kuressaare, Estonia, 2006. The British Computer Society (BCS)]. The normaliser in written as an environment machine. Only the computational behaviour of the normaliser is presented omitting details of termination. },
  Doi                      = {http://dx.doi.org/10.1016/j.entcs.2008.12.114},
  ISSN                     = {1571-0661},
  Keywords                 = {big-step normalisation},
  Owner                    = {jgross},
  Timestamp                = {2016.03.11},
  Url                      = {http://www.sciencedirect.com/science/article/pii/S157106610800577X}
}

@InCollection{constable1995using,
  Title                    = {Using Reflection to Explain and Enhance Type Theory},
  Author                   = {Constable, Robert L},
  Booktitle                = {Proof and Computation},
  Publisher                = {Springer},
  Year                     = {1995},
  Pages                    = {109--144},

  Abstract                 = {The five lectures at Marktoberdorf on which these notes are based were about the architecture of problem solving environments which use theorem provers. Experience with these systems over the past two decades has shown that the prover must be extensible, yet it must be kept. We examine a way to safely add new decision procedures to the Nuprl prover. It relies on a reflection mechanism and is applicable to any tactic-oriented prover with sufficient reflection. The lectures explain reflection in the setting of constructive type theory, the core logic of Nuprl.},
  Url                      = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.23.5290&rep=rep1&type=pdf}
}

@InCollection{danielsson2006formalisation,
  Title                    = {A Formalisation of a Dependently Typed Language as an Inductive-Recursive Family},
  Author                   = {Danielsson, Nils Anders},
  Booktitle                = {Types for Proofs and Programs},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2007},

  Address                  = {Berlin, Heidelberg},
  Chapter                  = {A Formalisation of a Dependently Typed Language as an Inductive-Recursive Family},
  Editor                   = {Altenkirch, Thorsten and McBride, Conor},
  Pages                    = {93--109},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {4502},

  Abstract                 = {It is demonstrated how a dependently typed lambda calculus (a logical framework) can be formalised inside a language with inductive- recursive families. The formalisation does not use raw terms; the well- typed terms are defined directly. It is hence impossible to create ill-typed terms.

As an example of programming with strong invariants, and to show that the formalisation is usable, normalisation is proved. Moreover, this proof seems to be the first formal account of normalisation by evaluation for a dependently typed language.},
  Doi                      = {10.1007/978-3-540-74464-1_7},
  ISBN                     = {978-3-540-74464-1},
  Owner                    = {jgross},
  Timestamp                = {2016.03.11},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-74464-1_7}
}

@Article{godel1931formal,
  Title                    = {{\"U}ber formal unentscheidbare {S}{\"a}tze der {P}rincipia {M}athematica und verwandter {S}ysteme {I}},
  Author                   = {G{\"o}del, Kurt},
  Journal                  = {Monatshefte f{\"u}r mathematik und physik},
  Year                     = {1931},
  Number                   = {1},
  Pages                    = {173--198},
  Volume                   = {38},

  Owner                    = {jgross},
  Publisher                = {Springer},
  Timestamp                = {2016.03.13},
  Url                      = {http://www.w-k-essler.de/pdfs/goedel.pdf}
}

@Book{hofstadter1980godel,
  Title                    = {G{\"o}del, {E}scher, {B}ach: An Eternal Golden Braid},
  Author                   = {Hofstadter, Douglas R.},
  Publisher                = {Vintage},
  Year                     = {1979},

  ISBN                     = {978-0394745022},
  Owner                    = {jgross},
  Timestamp                = {2016.03.13}
}

@Book{kleene1952introduction,
  Title                    = {Introduction to Metamathematics},
  Author                   = {Kleene, Stephen Cole},
  Publisher                = {Wolters-Noordhoff},
  Year                     = {1952},

  ISBN                     = {0-7204-2103-9},
  Owner                    = {jgross},
  Timestamp                = {2016.03.13}
}

@InProceedings{mcbride2010outrageous,
  Title                    = {Outrageous but Meaningful Coincidences: Dependent type-safe syntax and evaluation},
  Author                   = {McBride, Conor},
  Booktitle                = {Proceedings of the 6th ACM SIGPLAN workshop on Generic programming},
  Year                     = {2010},
  Organization             = {ACM},
  Pages                    = {1--12},

  Abstract                 = {Tagless interpreters for well-typed terms in some object language are a standard example of the power and benefit of precise indexing in types, whether with dependent types, or generalized algebraic datatypes. The key is to reflect object language types as indices (however they may be constituted) for the term datatype in the host language, so that host type coincidence ensures object type coincidence. Whilst this technique is widespread for simply typed object languages, dependent types have proved a tougher nut with nontrivial computation in type equality. In their type-safe representations, Danielsson [2006] and Chapman [2009] succeed in capturing the equality rules, but at the cost of representing equality derivations explicitly within terms. This article delivers a type-safe representation for a dependently typed object language, dubbed KIPLING, whose computational type equality just appropriates that of its host, Agda. The \textsc{Kipling} interpreter example is not merely \emph{de rigeur}--- it is key to the construction. At the heart of the technique is that key component of generic programming, the \emph{universe}.},
  Url                      = {https://personal.cis.strath.ac.uk/conor.mcbride/pub/DepRep/DepRep.pdf}
}

@Article{DBLP:journals/corr/abs-cs-0505034,
  Title                    = {Essential Incompleteness of Arithmetic Verified by Coq},
  Author                   = {Russell O'Connor},
  Journal                  = {CoRR},
  Year                     = {2005},
  Volume                   = {abs/cs/0505034},

  Bibsource                = {dblp computer science bibliography, http://dblp.org},
  Biburl                   = {http://dblp.uni-trier.de/rec/bib/journals/corr/abs-cs-0505034},
  Owner                    = {jgross},
  Timestamp                = {2016.03.11},
  Url                      = {http://arxiv.org/abs/cs/0505034}
}

@Article{paulson2015mechanised,
  Title                    = {A Mechanised Proof of {G}{\"o}del's Incompleteness Theorems using {N}ominal {I}sabelle},
  Author                   = {Paulson, Lawrence C},
  Journal                  = {Journal of Automated Reasoning},
  Year                     = {2015},
  Number                   = {1},
  Pages                    = {1--37},
  Volume                   = {55},

  Abstract                 = {An Isabelle/HOL formalisation of G{\"o}del's two incompleteness theorems is presented. The work follows {\'{S}}wierczkowski's detailed proof of the theorems using hereditarily finite (HF) set theory (Dissertationes Mathematicae 422, 1--58, 2003). Avoiding the usual arithmetical encodings of syntax eliminates the necessity to formalise elementary number theory within an embedded logical calculus. The Isabelle formalisation uses two separate treatments of variable binding: the nominal package (Logical Methods in Computer Science 8(2:14), 1--35, 2012) is shown to scale to a development of this complexity, while de Bruijn indices (Indagationes Mathematicae 34, 381--392, 1972) turn out to be ideal for coding syntax. Critical details of the Isabelle proof are described, in particular gaps and errors found in the literature.},
  Owner                    = {jgross},
  Publisher                = {Springer},
  Timestamp                = {2016.03.11},
  Url                      = {https://www.cl.cam.ac.uk/~lp15/papers/Formath/Goedel-ar.pdf}
}

@Misc{piponi-from-l-theorem-to-spreadsheet,
  Title                    = {From Löb's Theorem to Spreadsheet Evaluation},

  Author                   = {Dan Piponi},
  Month                    = {November},
  Year                     = {2006},

  Organization             = {A Neighborhood of Infinity},
  Owner                    = {jgross},
  Timestamp                = {2016.03.11},
  Url                      = {http://blog.sigfpe.com/2006/11/from-l-theorem-to-spreadsheet.html}
}

@Misc{loopsnoop,
  Title                    = {Scooping the Loop Snooper},

  Author                   = {Geoffrey K. Pullum},
  Month                    = {October},
  Year                     = {2000},

  Organization             = {University of Edinburgh},
  Owner                    = {jgross},
  Timestamp                = {2016.02.26},
  Url                      = {http://www.lel.ed.ac.uk/~gpullum/loopsnoop.html}
}

@Book{shankar1997metamathematics,
  Title                    = {Metamathematics, Machines and {G}{\"o}del's Proof},
  Author                   = {Shankar, Natarajan},
  Publisher                = {Cambridge University Press},
  Year                     = {1997},

  Owner                    = {jgross},
  Timestamp                = {2016.03.11}
}

@PhdThesis{Shankar:1986:PM:913294,
  Title                    = {Proof-checking Metamathematics (Theorem-proving)},
  Author                   = {Shankar, Natarajan},
  School                   = {The University of Texas at Austin},
  Year                     = {1986},
  Note                     = {AAI8717580},

  Owner                    = {jgross},
  Publisher                = {The University of Texas at Austin},
  Timestamp                = {2016.03.11}
}

@Article{tarski1936undefinability,
  Title                    = {Der {W}ahrheitsbegriff in den formalisierten {S}prachen},
  Author                   = {Tarski, Alfred},
  Journal                  = {Studia Philosophica},
  Year                     = {1936},
  Pages                    = {261--405},
  Volume                   = {1},

  Owner                    = {jgross},
  Timestamp                = {2016.03.13},
  Url                      = {http://www.w-k-essler.de/pdfs/Tarski.pdf}
}

@Misc{Yudkowsky2014,
  Title                    = {Lob's Theorem Cured My Social Anxiety},

  Author                   = {Brienne Yudkowsky},
  Month                    = {February},
  Year                     = {2014},

  Organization             = {Agenty Duck},
  Url                      = {http://agentyduck.blogspot.com/2014/02/lobs-theorem-cured-my-social-anxiety.html}
}

@Electronic{cartoon-lobs-theorem,
  Title                    = {(The Cartoon Guide to) {L}\"{o}b's Theorem},
  Author                   = {Eliezer Yudkowsky},
  Url                      = {http://www.yudkowsky.net/rational/lobs-theorem},
  Year                     = {2008},

  Owner                    = {jgross},
  Timestamp                = {2016.03.11}
}

